// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: app.proto

package pbuf

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms   []string `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
	Dataset string   `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Page    string   `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Query   string   `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Detail  bool     `protobuf:"varint,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Url     bool     `protobuf:"varint,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *SearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *SearchRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetDetail() bool {
	if x != nil {
		return x.Detail
	}
	return false
}

func (x *SearchRequest) GetUrl() bool {
	if x != nil {
		return x.Url
	}
	return false
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *Result `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{1}
}

func (x *SearchResponse) GetResults() *Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type MappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms   []string `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
	Dataset string   `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string   `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Page    string   `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *MappingRequest) Reset() {
	*x = MappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingRequest) ProtoMessage() {}

func (x *MappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingRequest.ProtoReflect.Descriptor instead.
func (*MappingRequest) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{2}
}

func (x *MappingRequest) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *MappingRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *MappingRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MappingRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

type MappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *MapFilterResult `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *MappingResponse) Reset() {
	*x = MappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingResponse) ProtoMessage() {}

func (x *MappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingResponse.ProtoReflect.Descriptor instead.
func (*MappingResponse) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{3}
}

func (x *MappingResponse) GetResults() *MapFilterResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type EntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Dataset    string `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *EntryRequest) Reset() {
	*x = EntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryRequest) ProtoMessage() {}

func (x *EntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryRequest.ProtoReflect.Descriptor instead.
func (*EntryRequest) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{4}
}

func (x *EntryRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *EntryRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

type EntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Xref `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EntryResponse) Reset() {
	*x = EntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryResponse) ProtoMessage() {}

func (x *EntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryResponse.ProtoReflect.Descriptor instead.
func (*EntryResponse) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{5}
}

func (x *EntryResponse) GetResult() *Xref {
	if x != nil {
		return x.Result
	}
	return nil
}

type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Dataset    string `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Page       int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Total      int32  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{6}
}

func (x *PageRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *PageRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *PageRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageRequest) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PageResponse) Reset() {
	*x = PageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageResponse) ProtoMessage() {}

func (x *PageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageResponse.ProtoReflect.Descriptor instead.
func (*PageResponse) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{7}
}

func (x *PageResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type FilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Dataset    string   `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Filters    []string `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	Page       int32    `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{8}
}

func (x *FilterRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *FilterRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *FilterRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FilterRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type FilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{9}
}

func (x *FilterResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type MetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetaRequest) Reset() {
	*x = MetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaRequest) ProtoMessage() {}

func (x *MetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaRequest.ProtoReflect.Descriptor instead.
func (*MetaRequest) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{10}
}

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*MetaKeyValue `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{11}
}

func (x *MetaResponse) GetResults() map[string]*MetaKeyValue {
	if x != nil {
		return x.Results
	}
	return nil
}

type MetaKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyvalues map[string]string `protobuf:"bytes,1,rep,name=keyvalues,proto3" json:"keyvalues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetaKeyValue) Reset() {
	*x = MetaKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaKeyValue) ProtoMessage() {}

func (x *MetaKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaKeyValue.ProtoReflect.Descriptor instead.
func (*MetaKeyValue) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{12}
}

func (x *MetaKeyValue) GetKeyvalues() map[string]string {
	if x != nil {
		return x.Keyvalues
	}
	return nil
}

type ListGenomesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListGenomesRequest) Reset() {
	*x = ListGenomesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGenomesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGenomesRequest) ProtoMessage() {}

func (x *ListGenomesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGenomesRequest.ProtoReflect.Descriptor instead.
func (*ListGenomesRequest) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{13}
}

func (x *ListGenomesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListGenomesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results string `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *ListGenomesResponse) Reset() {
	*x = ListGenomesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGenomesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGenomesResponse) ProtoMessage() {}

func (x *ListGenomesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGenomesResponse.ProtoReflect.Descriptor instead.
func (*ListGenomesResponse) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{14}
}

func (x *ListGenomesResponse) GetResults() string {
	if x != nil {
		return x.Results
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results  []*Xref `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Nextpage string  `protobuf:"bytes,2,opt,name=nextpage,proto3" json:"nextpage,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{15}
}

func (x *Result) GetResults() []*Xref {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Result) GetNextpage() string {
	if x != nil {
		return x.Nextpage
	}
	return ""
}

type MapFilterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results  []*MapFilter `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Nextpage string       `protobuf:"bytes,2,opt,name=nextpage,proto3" json:"nextpage,omitempty"`
}

func (x *MapFilterResult) Reset() {
	*x = MapFilterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapFilterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFilterResult) ProtoMessage() {}

func (x *MapFilterResult) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFilterResult.ProtoReflect.Descriptor instead.
func (*MapFilterResult) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{16}
}

func (x *MapFilterResult) GetResults() []*MapFilter {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MapFilterResult) GetNextpage() string {
	if x != nil {
		return x.Nextpage
	}
	return ""
}

type MapFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  *Xref   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Targets []*Xref `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *MapFilter) Reset() {
	*x = MapFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFilter) ProtoMessage() {}

func (x *MapFilter) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFilter.ProtoReflect.Descriptor instead.
func (*MapFilter) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{17}
}

func (x *MapFilter) GetSource() *Xref {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MapFilter) GetTargets() []*Xref {
	if x != nil {
		return x.Targets
	}
	return nil
}

type Xref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset    uint32 `protobuf:"varint,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	IsLink     bool   `protobuf:"varint,2,opt,name=is_link,json=isLink,proto3" json:"is_link,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"` // transient
	Keyword    string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`       // transient
	// Types that are assignable to Attributes:
	//	*Xref_Empty
	//	*Xref_Uniprot
	//	*Xref_Ontology
	//	*Xref_Hgnc
	//	*Xref_Interpro
	//	*Xref_Ensembl
	//	*Xref_Taxonomy
	//	*Xref_Hmdb
	//	*Xref_Ena
	//	*Xref_Pdb
	//	*Xref_Drugbank
	//	*Xref_Orphanet
	//	*Xref_Reactome
	//	*Xref_Chembl
	//	*Xref_Ufeature
	Attributes    isXref_Attributes    `protobuf_oneof:"attributes"`
	Count         uint32               `protobuf:"varint,20,opt,name=count,proto3" json:"count,omitempty"`
	Entries       []*XrefEntry         `protobuf:"bytes,21,rep,name=entries,proto3" json:"entries,omitempty"`
	DatasetCounts []*XrefDomainCount   `protobuf:"bytes,22,rep,name=dataset_counts,json=datasetCounts,proto3" json:"dataset_counts,omitempty"`
	DatasetPages  map[uint32]*PageInfo `protobuf:"bytes,23,rep,name=datasetPages,proto3" json:"datasetPages,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Pages         []string             `protobuf:"bytes,24,rep,name=pages,proto3" json:"pages,omitempty"`
	Url           string               `protobuf:"bytes,25,opt,name=url,proto3" json:"url,omitempty"` // transient
}

func (x *Xref) Reset() {
	*x = Xref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xref) ProtoMessage() {}

func (x *Xref) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xref.ProtoReflect.Descriptor instead.
func (*Xref) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{18}
}

func (x *Xref) GetDataset() uint32 {
	if x != nil {
		return x.Dataset
	}
	return 0
}

func (x *Xref) GetIsLink() bool {
	if x != nil {
		return x.IsLink
	}
	return false
}

func (x *Xref) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Xref) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (m *Xref) GetAttributes() isXref_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (x *Xref) GetEmpty() bool {
	if x, ok := x.GetAttributes().(*Xref_Empty); ok {
		return x.Empty
	}
	return false
}

func (x *Xref) GetUniprot() *UniprotAttr {
	if x, ok := x.GetAttributes().(*Xref_Uniprot); ok {
		return x.Uniprot
	}
	return nil
}

func (x *Xref) GetOntology() *OntologyAttr {
	if x, ok := x.GetAttributes().(*Xref_Ontology); ok {
		return x.Ontology
	}
	return nil
}

func (x *Xref) GetHgnc() *HgncAttr {
	if x, ok := x.GetAttributes().(*Xref_Hgnc); ok {
		return x.Hgnc
	}
	return nil
}

func (x *Xref) GetInterpro() *InterproAttr {
	if x, ok := x.GetAttributes().(*Xref_Interpro); ok {
		return x.Interpro
	}
	return nil
}

func (x *Xref) GetEnsembl() *EnsemblAttr {
	if x, ok := x.GetAttributes().(*Xref_Ensembl); ok {
		return x.Ensembl
	}
	return nil
}

func (x *Xref) GetTaxonomy() *TaxoAttr {
	if x, ok := x.GetAttributes().(*Xref_Taxonomy); ok {
		return x.Taxonomy
	}
	return nil
}

func (x *Xref) GetHmdb() *HmdbAttr {
	if x, ok := x.GetAttributes().(*Xref_Hmdb); ok {
		return x.Hmdb
	}
	return nil
}

func (x *Xref) GetEna() *EnaAttr {
	if x, ok := x.GetAttributes().(*Xref_Ena); ok {
		return x.Ena
	}
	return nil
}

func (x *Xref) GetPdb() *PdbAttr {
	if x, ok := x.GetAttributes().(*Xref_Pdb); ok {
		return x.Pdb
	}
	return nil
}

func (x *Xref) GetDrugbank() *DrugbankAttr {
	if x, ok := x.GetAttributes().(*Xref_Drugbank); ok {
		return x.Drugbank
	}
	return nil
}

func (x *Xref) GetOrphanet() *OrphanetAttr {
	if x, ok := x.GetAttributes().(*Xref_Orphanet); ok {
		return x.Orphanet
	}
	return nil
}

func (x *Xref) GetReactome() *ReactomeAttr {
	if x, ok := x.GetAttributes().(*Xref_Reactome); ok {
		return x.Reactome
	}
	return nil
}

func (x *Xref) GetChembl() *ChemblAttr {
	if x, ok := x.GetAttributes().(*Xref_Chembl); ok {
		return x.Chembl
	}
	return nil
}

func (x *Xref) GetUfeature() *UniprotFeatureAttr {
	if x, ok := x.GetAttributes().(*Xref_Ufeature); ok {
		return x.Ufeature
	}
	return nil
}

func (x *Xref) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Xref) GetEntries() []*XrefEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *Xref) GetDatasetCounts() []*XrefDomainCount {
	if x != nil {
		return x.DatasetCounts
	}
	return nil
}

func (x *Xref) GetDatasetPages() map[uint32]*PageInfo {
	if x != nil {
		return x.DatasetPages
	}
	return nil
}

func (x *Xref) GetPages() []string {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *Xref) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type isXref_Attributes interface {
	isXref_Attributes()
}

type Xref_Empty struct {
	Empty bool `protobuf:"varint,5,opt,name=empty,proto3,oneof"`
}

type Xref_Uniprot struct {
	Uniprot *UniprotAttr `protobuf:"bytes,6,opt,name=uniprot,proto3,oneof"`
}

type Xref_Ontology struct {
	Ontology *OntologyAttr `protobuf:"bytes,7,opt,name=ontology,proto3,oneof"`
}

type Xref_Hgnc struct {
	Hgnc *HgncAttr `protobuf:"bytes,8,opt,name=hgnc,proto3,oneof"`
}

type Xref_Interpro struct {
	Interpro *InterproAttr `protobuf:"bytes,9,opt,name=interpro,proto3,oneof"`
}

type Xref_Ensembl struct {
	Ensembl *EnsemblAttr `protobuf:"bytes,10,opt,name=ensembl,proto3,oneof"`
}

type Xref_Taxonomy struct {
	Taxonomy *TaxoAttr `protobuf:"bytes,11,opt,name=taxonomy,proto3,oneof"`
}

type Xref_Hmdb struct {
	Hmdb *HmdbAttr `protobuf:"bytes,12,opt,name=hmdb,proto3,oneof"`
}

type Xref_Ena struct {
	Ena *EnaAttr `protobuf:"bytes,13,opt,name=ena,proto3,oneof"`
}

type Xref_Pdb struct {
	Pdb *PdbAttr `protobuf:"bytes,14,opt,name=pdb,proto3,oneof"`
}

type Xref_Drugbank struct {
	Drugbank *DrugbankAttr `protobuf:"bytes,15,opt,name=drugbank,proto3,oneof"`
}

type Xref_Orphanet struct {
	Orphanet *OrphanetAttr `protobuf:"bytes,16,opt,name=orphanet,proto3,oneof"`
}

type Xref_Reactome struct {
	Reactome *ReactomeAttr `protobuf:"bytes,17,opt,name=reactome,proto3,oneof"`
}

type Xref_Chembl struct {
	Chembl *ChemblAttr `protobuf:"bytes,18,opt,name=chembl,proto3,oneof"`
}

type Xref_Ufeature struct {
	Ufeature *UniprotFeatureAttr `protobuf:"bytes,19,opt,name=ufeature,proto3,oneof"`
}

func (*Xref_Empty) isXref_Attributes() {}

func (*Xref_Uniprot) isXref_Attributes() {}

func (*Xref_Ontology) isXref_Attributes() {}

func (*Xref_Hgnc) isXref_Attributes() {}

func (*Xref_Interpro) isXref_Attributes() {}

func (*Xref_Ensembl) isXref_Attributes() {}

func (*Xref_Taxonomy) isXref_Attributes() {}

func (*Xref_Hmdb) isXref_Attributes() {}

func (*Xref_Ena) isXref_Attributes() {}

func (*Xref_Pdb) isXref_Attributes() {}

func (*Xref_Drugbank) isXref_Attributes() {}

func (*Xref_Orphanet) isXref_Attributes() {}

func (*Xref_Reactome) isXref_Attributes() {}

func (*Xref_Chembl) isXref_Attributes() {}

func (*Xref_Ufeature) isXref_Attributes() {}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages []string `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{19}
}

func (x *PageInfo) GetPages() []string {
	if x != nil {
		return x.Pages
	}
	return nil
}

type XrefEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset    uint32 `protobuf:"varint,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *XrefEntry) Reset() {
	*x = XrefEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XrefEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrefEntry) ProtoMessage() {}

func (x *XrefEntry) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrefEntry.ProtoReflect.Descriptor instead.
func (*XrefEntry) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{20}
}

func (x *XrefEntry) GetDataset() uint32 {
	if x != nil {
		return x.Dataset
	}
	return 0
}

func (x *XrefEntry) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type XrefDomainCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset uint32 `protobuf:"varint,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Count   uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *XrefDomainCount) Reset() {
	*x = XrefDomainCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XrefDomainCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrefDomainCount) ProtoMessage() {}

func (x *XrefDomainCount) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrefDomainCount.ProtoReflect.Descriptor instead.
func (*XrefDomainCount) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{21}
}

func (x *XrefDomainCount) GetDataset() uint32 {
	if x != nil {
		return x.Dataset
	}
	return 0
}

func (x *XrefDomainCount) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Alias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiers []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
}

func (x *Alias) Reset() {
	*x = Alias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alias) ProtoMessage() {}

func (x *Alias) ProtoReflect() protoreflect.Message {
	mi := &file_app_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alias.ProtoReflect.Descriptor instead.
func (*Alias) Descriptor() ([]byte, []int) {
	return file_app_proto_rawDescGZIP(), []int{22}
}

func (x *Alias) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

var File_app_proto protoreflect.FileDescriptor

var file_app_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x62, 0x75,
	0x66, 0x1a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x38, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6a, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x48, 0x0a,
	0x0c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e,
	0x58, 0x72, 0x65, 0x66, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x71, 0x0a, 0x0b,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x34, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x36,
	0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x28, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x58,
	0x72, 0x65, 0x66, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x70, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x58, 0x72, 0x65, 0x66, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x58, 0x72, 0x65, 0x66,
	0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xcf, 0x08, 0x0a, 0x04, 0x58, 0x72,
	0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x70, 0x72,
	0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x6e, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e,
	0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x67, 0x6e, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x67,
	0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x04, 0x68, 0x67, 0x6e, 0x63, 0x12, 0x30,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x12,
	0x2c, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x41, 0x74, 0x74,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x24, 0x0a,
	0x04, 0x68, 0x6d, 0x64, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x75, 0x66, 0x2e, 0x48, 0x6d, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x04, 0x68,
	0x6d, 0x64, 0x62, 0x12, 0x21, 0x0a, 0x03, 0x65, 0x6e, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x61, 0x41, 0x74, 0x74, 0x72, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x6e, 0x61, 0x12, 0x21, 0x0a, 0x03, 0x70, 0x64, 0x62, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x64, 0x62, 0x41, 0x74,
	0x74, 0x72, 0x48, 0x00, 0x52, 0x03, 0x70, 0x64, 0x62, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x72, 0x75,
	0x67, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x72, 0x75, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x72, 0x75, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x08, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x30, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x6d, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x75,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x6e, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x08, 0x75, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x75,
	0x66, 0x2e, 0x58, 0x72, 0x65, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x75, 0x66, 0x2e, 0x58, 0x72, 0x65, 0x66, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e,
	0x58, 0x72, 0x65, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x4f, 0x0a, 0x11,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x45, 0x0a,
	0x09, 0x58, 0x72, 0x65, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x0f, 0x58, 0x72, 0x65, 0x66, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x32, 0x87, 0x03, 0x0a, 0x0f, 0x42, 0x69, 0x6f, 0x62, 0x74, 0x72, 0x65, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x13, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x2e, 0x70,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e,
	0x70, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x13,
	0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_proto_rawDescOnce sync.Once
	file_app_proto_rawDescData = file_app_proto_rawDesc
)

func file_app_proto_rawDescGZIP() []byte {
	file_app_proto_rawDescOnce.Do(func() {
		file_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_proto_rawDescData)
	})
	return file_app_proto_rawDescData
}

var file_app_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_app_proto_goTypes = []interface{}{
	(*SearchRequest)(nil),       // 0: pbuf.SearchRequest
	(*SearchResponse)(nil),      // 1: pbuf.SearchResponse
	(*MappingRequest)(nil),      // 2: pbuf.MappingRequest
	(*MappingResponse)(nil),     // 3: pbuf.MappingResponse
	(*EntryRequest)(nil),        // 4: pbuf.EntryRequest
	(*EntryResponse)(nil),       // 5: pbuf.EntryResponse
	(*PageRequest)(nil),         // 6: pbuf.PageRequest
	(*PageResponse)(nil),        // 7: pbuf.PageResponse
	(*FilterRequest)(nil),       // 8: pbuf.FilterRequest
	(*FilterResponse)(nil),      // 9: pbuf.FilterResponse
	(*MetaRequest)(nil),         // 10: pbuf.MetaRequest
	(*MetaResponse)(nil),        // 11: pbuf.MetaResponse
	(*MetaKeyValue)(nil),        // 12: pbuf.MetaKeyValue
	(*ListGenomesRequest)(nil),  // 13: pbuf.ListGenomesRequest
	(*ListGenomesResponse)(nil), // 14: pbuf.ListGenomesResponse
	(*Result)(nil),              // 15: pbuf.Result
	(*MapFilterResult)(nil),     // 16: pbuf.MapFilterResult
	(*MapFilter)(nil),           // 17: pbuf.MapFilter
	(*Xref)(nil),                // 18: pbuf.Xref
	(*PageInfo)(nil),            // 19: pbuf.PageInfo
	(*XrefEntry)(nil),           // 20: pbuf.XrefEntry
	(*XrefDomainCount)(nil),     // 21: pbuf.XrefDomainCount
	(*Alias)(nil),               // 22: pbuf.Alias
	nil,                         // 23: pbuf.MetaResponse.ResultsEntry
	nil,                         // 24: pbuf.MetaKeyValue.KeyvaluesEntry
	nil,                         // 25: pbuf.Xref.DatasetPagesEntry
	(*UniprotAttr)(nil),         // 26: pbuf.UniprotAttr
	(*OntologyAttr)(nil),        // 27: pbuf.OntologyAttr
	(*HgncAttr)(nil),            // 28: pbuf.HgncAttr
	(*InterproAttr)(nil),        // 29: pbuf.InterproAttr
	(*EnsemblAttr)(nil),         // 30: pbuf.EnsemblAttr
	(*TaxoAttr)(nil),            // 31: pbuf.TaxoAttr
	(*HmdbAttr)(nil),            // 32: pbuf.HmdbAttr
	(*EnaAttr)(nil),             // 33: pbuf.EnaAttr
	(*PdbAttr)(nil),             // 34: pbuf.PdbAttr
	(*DrugbankAttr)(nil),        // 35: pbuf.DrugbankAttr
	(*OrphanetAttr)(nil),        // 36: pbuf.OrphanetAttr
	(*ReactomeAttr)(nil),        // 37: pbuf.ReactomeAttr
	(*ChemblAttr)(nil),          // 38: pbuf.ChemblAttr
	(*UniprotFeatureAttr)(nil),  // 39: pbuf.UniprotFeatureAttr
}
var file_app_proto_depIdxs = []int32{
	15, // 0: pbuf.SearchResponse.results:type_name -> pbuf.Result
	16, // 1: pbuf.MappingResponse.results:type_name -> pbuf.MapFilterResult
	18, // 2: pbuf.EntryResponse.result:type_name -> pbuf.Xref
	15, // 3: pbuf.PageResponse.result:type_name -> pbuf.Result
	15, // 4: pbuf.FilterResponse.result:type_name -> pbuf.Result
	23, // 5: pbuf.MetaResponse.results:type_name -> pbuf.MetaResponse.ResultsEntry
	24, // 6: pbuf.MetaKeyValue.keyvalues:type_name -> pbuf.MetaKeyValue.KeyvaluesEntry
	18, // 7: pbuf.Result.results:type_name -> pbuf.Xref
	17, // 8: pbuf.MapFilterResult.results:type_name -> pbuf.MapFilter
	18, // 9: pbuf.MapFilter.source:type_name -> pbuf.Xref
	18, // 10: pbuf.MapFilter.targets:type_name -> pbuf.Xref
	26, // 11: pbuf.Xref.uniprot:type_name -> pbuf.UniprotAttr
	27, // 12: pbuf.Xref.ontology:type_name -> pbuf.OntologyAttr
	28, // 13: pbuf.Xref.hgnc:type_name -> pbuf.HgncAttr
	29, // 14: pbuf.Xref.interpro:type_name -> pbuf.InterproAttr
	30, // 15: pbuf.Xref.ensembl:type_name -> pbuf.EnsemblAttr
	31, // 16: pbuf.Xref.taxonomy:type_name -> pbuf.TaxoAttr
	32, // 17: pbuf.Xref.hmdb:type_name -> pbuf.HmdbAttr
	33, // 18: pbuf.Xref.ena:type_name -> pbuf.EnaAttr
	34, // 19: pbuf.Xref.pdb:type_name -> pbuf.PdbAttr
	35, // 20: pbuf.Xref.drugbank:type_name -> pbuf.DrugbankAttr
	36, // 21: pbuf.Xref.orphanet:type_name -> pbuf.OrphanetAttr
	37, // 22: pbuf.Xref.reactome:type_name -> pbuf.ReactomeAttr
	38, // 23: pbuf.Xref.chembl:type_name -> pbuf.ChemblAttr
	39, // 24: pbuf.Xref.ufeature:type_name -> pbuf.UniprotFeatureAttr
	20, // 25: pbuf.Xref.entries:type_name -> pbuf.XrefEntry
	21, // 26: pbuf.Xref.dataset_counts:type_name -> pbuf.XrefDomainCount
	25, // 27: pbuf.Xref.datasetPages:type_name -> pbuf.Xref.DatasetPagesEntry
	12, // 28: pbuf.MetaResponse.ResultsEntry.value:type_name -> pbuf.MetaKeyValue
	19, // 29: pbuf.Xref.DatasetPagesEntry.value:type_name -> pbuf.PageInfo
	0,  // 30: pbuf.BiobtreeService.Search:input_type -> pbuf.SearchRequest
	2,  // 31: pbuf.BiobtreeService.Mapping:input_type -> pbuf.MappingRequest
	4,  // 32: pbuf.BiobtreeService.Entry:input_type -> pbuf.EntryRequest
	6,  // 33: pbuf.BiobtreeService.Page:input_type -> pbuf.PageRequest
	8,  // 34: pbuf.BiobtreeService.Filter:input_type -> pbuf.FilterRequest
	10, // 35: pbuf.BiobtreeService.Meta:input_type -> pbuf.MetaRequest
	13, // 36: pbuf.BiobtreeService.ListGenomes:input_type -> pbuf.ListGenomesRequest
	1,  // 37: pbuf.BiobtreeService.Search:output_type -> pbuf.SearchResponse
	3,  // 38: pbuf.BiobtreeService.Mapping:output_type -> pbuf.MappingResponse
	5,  // 39: pbuf.BiobtreeService.Entry:output_type -> pbuf.EntryResponse
	7,  // 40: pbuf.BiobtreeService.Page:output_type -> pbuf.PageResponse
	9,  // 41: pbuf.BiobtreeService.Filter:output_type -> pbuf.FilterResponse
	11, // 42: pbuf.BiobtreeService.Meta:output_type -> pbuf.MetaResponse
	14, // 43: pbuf.BiobtreeService.ListGenomes:output_type -> pbuf.ListGenomesResponse
	37, // [37:44] is the sub-list for method output_type
	30, // [30:37] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_app_proto_init() }
func file_app_proto_init() {
	if File_app_proto != nil {
		return
	}
	file_attr_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGenomesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGenomesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapFilterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XrefEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XrefDomainCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_app_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Xref_Empty)(nil),
		(*Xref_Uniprot)(nil),
		(*Xref_Ontology)(nil),
		(*Xref_Hgnc)(nil),
		(*Xref_Interpro)(nil),
		(*Xref_Ensembl)(nil),
		(*Xref_Taxonomy)(nil),
		(*Xref_Hmdb)(nil),
		(*Xref_Ena)(nil),
		(*Xref_Pdb)(nil),
		(*Xref_Drugbank)(nil),
		(*Xref_Orphanet)(nil),
		(*Xref_Reactome)(nil),
		(*Xref_Chembl)(nil),
		(*Xref_Ufeature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_proto_goTypes,
		DependencyIndexes: file_app_proto_depIdxs,
		MessageInfos:      file_app_proto_msgTypes,
	}.Build()
	File_app_proto = out.File
	file_app_proto_rawDesc = nil
	file_app_proto_goTypes = nil
	file_app_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BiobtreeServiceClient is the client API for BiobtreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BiobtreeServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Mapping(ctx context.Context, in *MappingRequest, opts ...grpc.CallOption) (*MappingResponse, error)
	Entry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	Page(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageResponse, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	ListGenomes(ctx context.Context, in *ListGenomesRequest, opts ...grpc.CallOption) (*ListGenomesResponse, error)
}

type biobtreeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiobtreeServiceClient(cc grpc.ClientConnInterface) BiobtreeServiceClient {
	return &biobtreeServiceClient{cc}
}

func (c *biobtreeServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/pbuf.BiobtreeService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biobtreeServiceClient) Mapping(ctx context.Context, in *MappingRequest, opts ...grpc.CallOption) (*MappingResponse, error) {
	out := new(MappingResponse)
	err := c.cc.Invoke(ctx, "/pbuf.BiobtreeService/Mapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biobtreeServiceClient) Entry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, "/pbuf.BiobtreeService/Entry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biobtreeServiceClient) Page(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageResponse, error) {
	out := new(PageResponse)
	err := c.cc.Invoke(ctx, "/pbuf.BiobtreeService/Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biobtreeServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, "/pbuf.BiobtreeService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biobtreeServiceClient) Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/pbuf.BiobtreeService/Meta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biobtreeServiceClient) ListGenomes(ctx context.Context, in *ListGenomesRequest, opts ...grpc.CallOption) (*ListGenomesResponse, error) {
	out := new(ListGenomesResponse)
	err := c.cc.Invoke(ctx, "/pbuf.BiobtreeService/ListGenomes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiobtreeServiceServer is the server API for BiobtreeService service.
type BiobtreeServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Mapping(context.Context, *MappingRequest) (*MappingResponse, error)
	Entry(context.Context, *EntryRequest) (*EntryResponse, error)
	Page(context.Context, *PageRequest) (*PageResponse, error)
	Filter(context.Context, *FilterRequest) (*FilterResponse, error)
	Meta(context.Context, *MetaRequest) (*MetaResponse, error)
	ListGenomes(context.Context, *ListGenomesRequest) (*ListGenomesResponse, error)
}

// UnimplementedBiobtreeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBiobtreeServiceServer struct {
}

func (*UnimplementedBiobtreeServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedBiobtreeServiceServer) Mapping(context.Context, *MappingRequest) (*MappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mapping not implemented")
}
func (*UnimplementedBiobtreeServiceServer) Entry(context.Context, *EntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entry not implemented")
}
func (*UnimplementedBiobtreeServiceServer) Page(context.Context, *PageRequest) (*PageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (*UnimplementedBiobtreeServiceServer) Filter(context.Context, *FilterRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (*UnimplementedBiobtreeServiceServer) Meta(context.Context, *MetaRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Meta not implemented")
}
func (*UnimplementedBiobtreeServiceServer) ListGenomes(context.Context, *ListGenomesRequest) (*ListGenomesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenomes not implemented")
}

func RegisterBiobtreeServiceServer(s *grpc.Server, srv BiobtreeServiceServer) {
	s.RegisterService(&_BiobtreeService_serviceDesc, srv)
}

func _BiobtreeService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiobtreeServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.BiobtreeService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiobtreeServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiobtreeService_Mapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiobtreeServiceServer).Mapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.BiobtreeService/Mapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiobtreeServiceServer).Mapping(ctx, req.(*MappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiobtreeService_Entry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiobtreeServiceServer).Entry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.BiobtreeService/Entry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiobtreeServiceServer).Entry(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiobtreeService_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiobtreeServiceServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.BiobtreeService/Page",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiobtreeServiceServer).Page(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiobtreeService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiobtreeServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.BiobtreeService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiobtreeServiceServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiobtreeService_Meta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiobtreeServiceServer).Meta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.BiobtreeService/Meta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiobtreeServiceServer).Meta(ctx, req.(*MetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiobtreeService_ListGenomes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGenomesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiobtreeServiceServer).ListGenomes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.BiobtreeService/ListGenomes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiobtreeServiceServer).ListGenomes(ctx, req.(*ListGenomesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiobtreeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbuf.BiobtreeService",
	HandlerType: (*BiobtreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _BiobtreeService_Search_Handler,
		},
		{
			MethodName: "Mapping",
			Handler:    _BiobtreeService_Mapping_Handler,
		},
		{
			MethodName: "Entry",
			Handler:    _BiobtreeService_Entry_Handler,
		},
		{
			MethodName: "Page",
			Handler:    _BiobtreeService_Page_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _BiobtreeService_Filter_Handler,
		},
		{
			MethodName: "Meta",
			Handler:    _BiobtreeService_Meta_Handler,
		},
		{
			MethodName: "ListGenomes",
			Handler:    _BiobtreeService_ListGenomes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
