// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: attr.proto

package pbuf

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Ensemblbranch int32

const (
	Ensemblbranch_NONE     Ensemblbranch = 0
	Ensemblbranch_ENSEMBL  Ensemblbranch = 1
	Ensemblbranch_BACTERIA Ensemblbranch = 2
	Ensemblbranch_FUNGI    Ensemblbranch = 3
	Ensemblbranch_METAZOA  Ensemblbranch = 4
	Ensemblbranch_PLANT    Ensemblbranch = 5
	Ensemblbranch_PROTIST  Ensemblbranch = 6
)

// Enum value maps for Ensemblbranch.
var (
	Ensemblbranch_name = map[int32]string{
		0: "NONE",
		1: "ENSEMBL",
		2: "BACTERIA",
		3: "FUNGI",
		4: "METAZOA",
		5: "PLANT",
		6: "PROTIST",
	}
	Ensemblbranch_value = map[string]int32{
		"NONE":     0,
		"ENSEMBL":  1,
		"BACTERIA": 2,
		"FUNGI":    3,
		"METAZOA":  4,
		"PLANT":    5,
		"PROTIST":  6,
	}
)

func (x Ensemblbranch) Enum() *Ensemblbranch {
	p := new(Ensemblbranch)
	*p = x
	return p
}

func (x Ensemblbranch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ensemblbranch) Descriptor() protoreflect.EnumDescriptor {
	return file_attr_proto_enumTypes[0].Descriptor()
}

func (Ensemblbranch) Type() protoreflect.EnumType {
	return &file_attr_proto_enumTypes[0]
}

func (x Ensemblbranch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ensemblbranch.Descriptor instead.
func (Ensemblbranch) EnumDescriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{0}
}

type OntologyAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Synonyms []string `protobuf:"bytes,3,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
}

func (x *OntologyAttr) Reset() {
	*x = OntologyAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OntologyAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OntologyAttr) ProtoMessage() {}

func (x *OntologyAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OntologyAttr.ProtoReflect.Descriptor instead.
func (*OntologyAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{0}
}

func (x *OntologyAttr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OntologyAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OntologyAttr) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

type HgncAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names       []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Symbols     []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
	LocusGroup  string   `protobuf:"bytes,3,opt,name=locus_group,json=locusGroup,proto3" json:"locus_group,omitempty"`
	Location    string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Aliases     []string `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	LocusType   string   `protobuf:"bytes,6,opt,name=locus_type,json=locusType,proto3" json:"locus_type,omitempty"`
	PrevNames   []string `protobuf:"bytes,7,rep,name=prev_names,json=prevNames,proto3" json:"prev_names,omitempty"`
	PrevSymbols []string `protobuf:"bytes,8,rep,name=prev_symbols,json=prevSymbols,proto3" json:"prev_symbols,omitempty"`
	Status      string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	GeneGroups  []string `protobuf:"bytes,10,rep,name=gene_groups,json=geneGroups,proto3" json:"gene_groups,omitempty"`
}

func (x *HgncAttr) Reset() {
	*x = HgncAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HgncAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HgncAttr) ProtoMessage() {}

func (x *HgncAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HgncAttr.ProtoReflect.Descriptor instead.
func (*HgncAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{1}
}

func (x *HgncAttr) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *HgncAttr) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *HgncAttr) GetLocusGroup() string {
	if x != nil {
		return x.LocusGroup
	}
	return ""
}

func (x *HgncAttr) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *HgncAttr) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *HgncAttr) GetLocusType() string {
	if x != nil {
		return x.LocusType
	}
	return ""
}

func (x *HgncAttr) GetPrevNames() []string {
	if x != nil {
		return x.PrevNames
	}
	return nil
}

func (x *HgncAttr) GetPrevSymbols() []string {
	if x != nil {
		return x.PrevSymbols
	}
	return nil
}

func (x *HgncAttr) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HgncAttr) GetGeneGroups() []string {
	if x != nil {
		return x.GeneGroups
	}
	return nil
}

type InterproAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names        []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	ShortName    string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Type         string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ProteinCount int32    `protobuf:"varint,4,opt,name=protein_count,json=proteinCount,proto3" json:"protein_count,omitempty"`
}

func (x *InterproAttr) Reset() {
	*x = InterproAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterproAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterproAttr) ProtoMessage() {}

func (x *InterproAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterproAttr.ProtoReflect.Descriptor instead.
func (*InterproAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{2}
}

func (x *InterproAttr) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *InterproAttr) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *InterproAttr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InterproAttr) GetProteinCount() int32 {
	if x != nil {
		return x.ProteinCount
	}
	return 0
}

type EnsemblAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Start       int32         `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End         int32         `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Biotype     string        `protobuf:"bytes,5,opt,name=biotype,proto3" json:"biotype,omitempty"`
	Genome      string        `protobuf:"bytes,6,opt,name=genome,proto3" json:"genome,omitempty"`
	Strand      string        `protobuf:"bytes,7,opt,name=strand,proto3" json:"strand,omitempty"`
	SeqRegion   string        `protobuf:"bytes,8,opt,name=seq_region,json=seqRegion,proto3" json:"seq_region,omitempty"`
	Branch      Ensemblbranch `protobuf:"varint,9,opt,name=branch,proto3,enum=pbuf.Ensemblbranch" json:"branch,omitempty"`
	Utr5Start   int32         `protobuf:"varint,10,opt,name=utr5Start,proto3" json:"utr5Start,omitempty"`
	Utr5End     int32         `protobuf:"varint,11,opt,name=utr5End,proto3" json:"utr5End,omitempty"`
	Utr3Start   int32         `protobuf:"varint,12,opt,name=utr3Start,proto3" json:"utr3Start,omitempty"`
	Utr3End     int32         `protobuf:"varint,13,opt,name=utr3End,proto3" json:"utr3End,omitempty"`
	Version     int32         `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	Source      string        `protobuf:"bytes,15,opt,name=source,proto3" json:"source,omitempty"`
	Frame       int32         `protobuf:"varint,16,opt,name=frame,proto3" json:"frame,omitempty"`
}

func (x *EnsemblAttr) Reset() {
	*x = EnsemblAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsemblAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsemblAttr) ProtoMessage() {}

func (x *EnsemblAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsemblAttr.ProtoReflect.Descriptor instead.
func (*EnsemblAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{3}
}

func (x *EnsemblAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnsemblAttr) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EnsemblAttr) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *EnsemblAttr) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *EnsemblAttr) GetBiotype() string {
	if x != nil {
		return x.Biotype
	}
	return ""
}

func (x *EnsemblAttr) GetGenome() string {
	if x != nil {
		return x.Genome
	}
	return ""
}

func (x *EnsemblAttr) GetStrand() string {
	if x != nil {
		return x.Strand
	}
	return ""
}

func (x *EnsemblAttr) GetSeqRegion() string {
	if x != nil {
		return x.SeqRegion
	}
	return ""
}

func (x *EnsemblAttr) GetBranch() Ensemblbranch {
	if x != nil {
		return x.Branch
	}
	return Ensemblbranch_NONE
}

func (x *EnsemblAttr) GetUtr5Start() int32 {
	if x != nil {
		return x.Utr5Start
	}
	return 0
}

func (x *EnsemblAttr) GetUtr5End() int32 {
	if x != nil {
		return x.Utr5End
	}
	return 0
}

func (x *EnsemblAttr) GetUtr3Start() int32 {
	if x != nil {
		return x.Utr3Start
	}
	return 0
}

func (x *EnsemblAttr) GetUtr3End() int32 {
	if x != nil {
		return x.Utr3End
	}
	return 0
}

func (x *EnsemblAttr) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *EnsemblAttr) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EnsemblAttr) GetFrame() int32 {
	if x != nil {
		return x.Frame
	}
	return 0
}

type TaxoAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CommonName        string `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Rank              int32  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	TaxonomicDivision string `protobuf:"bytes,4,opt,name=taxonomic_division,json=taxonomicDivision,proto3" json:"taxonomic_division,omitempty"`
}

func (x *TaxoAttr) Reset() {
	*x = TaxoAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxoAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxoAttr) ProtoMessage() {}

func (x *TaxoAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxoAttr.ProtoReflect.Descriptor instead.
func (*TaxoAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{4}
}

func (x *TaxoAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxoAttr) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *TaxoAttr) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TaxoAttr) GetTaxonomicDivision() string {
	if x != nil {
		return x.TaxonomicDivision
	}
	return ""
}

type EnaAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EnaAttr) Reset() {
	*x = EnaAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnaAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnaAttr) ProtoMessage() {}

func (x *EnaAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnaAttr.ProtoReflect.Descriptor instead.
func (*EnaAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{5}
}

func (x *EnaAttr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PdbAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method     string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Chains     string `protobuf:"bytes,2,opt,name=chains,proto3" json:"chains,omitempty"`
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
}

func (x *PdbAttr) Reset() {
	*x = PdbAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdbAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdbAttr) ProtoMessage() {}

func (x *PdbAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdbAttr.ProtoReflect.Descriptor instead.
func (*PdbAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{6}
}

func (x *PdbAttr) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PdbAttr) GetChains() string {
	if x != nil {
		return x.Chains
	}
	return ""
}

func (x *PdbAttr) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

type DrugbankAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DrugbankAttr) Reset() {
	*x = DrugbankAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrugbankAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrugbankAttr) ProtoMessage() {}

func (x *DrugbankAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrugbankAttr.ProtoReflect.Descriptor instead.
func (*DrugbankAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{7}
}

func (x *DrugbankAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OrphanetAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disease string `protobuf:"bytes,1,opt,name=disease,proto3" json:"disease,omitempty"`
}

func (x *OrphanetAttr) Reset() {
	*x = OrphanetAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrphanetAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrphanetAttr) ProtoMessage() {}

func (x *OrphanetAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrphanetAttr.ProtoReflect.Descriptor instead.
func (*OrphanetAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{8}
}

func (x *OrphanetAttr) GetDisease() string {
	if x != nil {
		return x.Disease
	}
	return ""
}

type ReactomeAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pathway string `protobuf:"bytes,1,opt,name=pathway,proto3" json:"pathway,omitempty"`
}

func (x *ReactomeAttr) Reset() {
	*x = ReactomeAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactomeAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactomeAttr) ProtoMessage() {}

func (x *ReactomeAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactomeAttr.ProtoReflect.Descriptor instead.
func (*ReactomeAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{9}
}

func (x *ReactomeAttr) GetPathway() string {
	if x != nil {
		return x.Pathway
	}
	return ""
}

type UniprotAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accessions       []string     `protobuf:"bytes,1,rep,name=accessions,proto3" json:"accessions,omitempty"`
	Genes            []string     `protobuf:"bytes,2,rep,name=genes,proto3" json:"genes,omitempty"`
	Names            []string     `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	AlternativeNames []string     `protobuf:"bytes,4,rep,name=alternative_names,json=alternativeNames,proto3" json:"alternative_names,omitempty"`
	SubmittedNames   []string     `protobuf:"bytes,5,rep,name=submitted_names,json=submittedNames,proto3" json:"submitted_names,omitempty"`
	Sequence         *UniSequence `protobuf:"bytes,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Reviewed         bool         `protobuf:"varint,8,opt,name=reviewed,proto3" json:"reviewed,omitempty"`
}

func (x *UniprotAttr) Reset() {
	*x = UniprotAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniprotAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniprotAttr) ProtoMessage() {}

func (x *UniprotAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniprotAttr.ProtoReflect.Descriptor instead.
func (*UniprotAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{10}
}

func (x *UniprotAttr) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

func (x *UniprotAttr) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *UniprotAttr) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *UniprotAttr) GetAlternativeNames() []string {
	if x != nil {
		return x.AlternativeNames
	}
	return nil
}

func (x *UniprotAttr) GetSubmittedNames() []string {
	if x != nil {
		return x.SubmittedNames
	}
	return nil
}

func (x *UniprotAttr) GetSequence() *UniSequence {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *UniprotAttr) GetReviewed() bool {
	if x != nil {
		return x.Reviewed
	}
	return false
}

type UniSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq  string `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Mass int32  `protobuf:"varint,2,opt,name=mass,proto3" json:"mass,omitempty"`
}

func (x *UniSequence) Reset() {
	*x = UniSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniSequence) ProtoMessage() {}

func (x *UniSequence) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniSequence.ProtoReflect.Descriptor instead.
func (*UniSequence) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{11}
}

func (x *UniSequence) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *UniSequence) GetMass() int32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type UniprotFeatureAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string                    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Id          string                    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Evidences   []*UniprotFeatureEvidence `protobuf:"bytes,4,rep,name=evidences,proto3" json:"evidences,omitempty"`
	Original    string                    `protobuf:"bytes,5,opt,name=original,proto3" json:"original,omitempty"`
	Variation   string                    `protobuf:"bytes,6,opt,name=variation,proto3" json:"variation,omitempty"`
	Location    *UniLocation              `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *UniprotFeatureAttr) Reset() {
	*x = UniprotFeatureAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniprotFeatureAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniprotFeatureAttr) ProtoMessage() {}

func (x *UniprotFeatureAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniprotFeatureAttr.ProtoReflect.Descriptor instead.
func (*UniprotFeatureAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{12}
}

func (x *UniprotFeatureAttr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UniprotFeatureAttr) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UniprotFeatureAttr) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniprotFeatureAttr) GetEvidences() []*UniprotFeatureEvidence {
	if x != nil {
		return x.Evidences
	}
	return nil
}

func (x *UniprotFeatureAttr) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *UniprotFeatureAttr) GetVariation() string {
	if x != nil {
		return x.Variation
	}
	return ""
}

func (x *UniprotFeatureAttr) GetLocation() *UniLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type UniprotFeatureEvidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UniprotFeatureEvidence) Reset() {
	*x = UniprotFeatureEvidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniprotFeatureEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniprotFeatureEvidence) ProtoMessage() {}

func (x *UniprotFeatureEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniprotFeatureEvidence.ProtoReflect.Descriptor instead.
func (*UniprotFeatureEvidence) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{13}
}

func (x *UniprotFeatureEvidence) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UniprotFeatureEvidence) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UniprotFeatureEvidence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UniLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin int32 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *UniLocation) Reset() {
	*x = UniLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniLocation) ProtoMessage() {}

func (x *UniLocation) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniLocation.ProtoReflect.Descriptor instead.
func (*UniLocation) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{14}
}

func (x *UniLocation) GetBegin() int32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *UniLocation) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type ChemblAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doc             *ChemblDocument        `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	Assay           *ChemblAssay           `protobuf:"bytes,2,opt,name=assay,proto3" json:"assay,omitempty"`
	Activity        *ChemblActivity        `protobuf:"bytes,3,opt,name=activity,proto3" json:"activity,omitempty"`
	Molecule        *ChemblMolecule        `protobuf:"bytes,4,opt,name=molecule,proto3" json:"molecule,omitempty"`
	Target          *ChemblTarget          `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	TargetComponent *ChemblTargetComponent `protobuf:"bytes,6,opt,name=targetComponent,proto3" json:"targetComponent,omitempty"`
	CellLine        *ChemblCellLine        `protobuf:"bytes,7,opt,name=cellLine,proto3" json:"cellLine,omitempty"`
}

func (x *ChemblAttr) Reset() {
	*x = ChemblAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblAttr) ProtoMessage() {}

func (x *ChemblAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblAttr.ProtoReflect.Descriptor instead.
func (*ChemblAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{15}
}

func (x *ChemblAttr) GetDoc() *ChemblDocument {
	if x != nil {
		return x.Doc
	}
	return nil
}

func (x *ChemblAttr) GetAssay() *ChemblAssay {
	if x != nil {
		return x.Assay
	}
	return nil
}

func (x *ChemblAttr) GetActivity() *ChemblActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ChemblAttr) GetMolecule() *ChemblMolecule {
	if x != nil {
		return x.Molecule
	}
	return nil
}

func (x *ChemblAttr) GetTarget() *ChemblTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ChemblAttr) GetTargetComponent() *ChemblTargetComponent {
	if x != nil {
		return x.TargetComponent
	}
	return nil
}

func (x *ChemblAttr) GetCellLine() *ChemblCellLine {
	if x != nil {
		return x.CellLine
	}
	return nil
}

type ChemblDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type             string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Journal          string `protobuf:"bytes,3,opt,name=journal,proto3" json:"journal,omitempty"`
	JournalShortName string `protobuf:"bytes,4,opt,name=journalShortName,proto3" json:"journalShortName,omitempty"`
}

func (x *ChemblDocument) Reset() {
	*x = ChemblDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblDocument) ProtoMessage() {}

func (x *ChemblDocument) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblDocument.ProtoReflect.Descriptor instead.
func (*ChemblDocument) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{16}
}

func (x *ChemblDocument) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChemblDocument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChemblDocument) GetJournal() string {
	if x != nil {
		return x.Journal
	}
	return ""
}

func (x *ChemblDocument) GetJournalShortName() string {
	if x != nil {
		return x.JournalShortName
	}
	return ""
}

type ChemblActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Relation            string  `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Value               float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Units               string  `protobuf:"bytes,4,opt,name=units,proto3" json:"units,omitempty"`
	StandardType        string  `protobuf:"bytes,5,opt,name=standardType,proto3" json:"standardType,omitempty"`
	StandardRelation    string  `protobuf:"bytes,6,opt,name=standardRelation,proto3" json:"standardRelation,omitempty"`
	StandardValue       float64 `protobuf:"fixed64,7,opt,name=standardValue,proto3" json:"standardValue,omitempty"`
	StandardUnits       string  `protobuf:"bytes,8,opt,name=standardUnits,proto3" json:"standardUnits,omitempty"`
	DataValidityIssue   string  `protobuf:"bytes,9,opt,name=dataValidityIssue,proto3" json:"dataValidityIssue,omitempty"`
	DataValidityComment string  `protobuf:"bytes,10,opt,name=dataValidityComment,proto3" json:"dataValidityComment,omitempty"`
	PChembl             float64 `protobuf:"fixed64,11,opt,name=pChembl,proto3" json:"pChembl,omitempty"`
	ActivityComment     string  `protobuf:"bytes,12,opt,name=activityComment,proto3" json:"activityComment,omitempty"`
	PotentialDuplicate  string  `protobuf:"bytes,13,opt,name=potentialDuplicate,proto3" json:"potentialDuplicate,omitempty"`
	Bao                 string  `protobuf:"bytes,14,opt,name=bao,proto3" json:"bao,omitempty"`
}

func (x *ChemblActivity) Reset() {
	*x = ChemblActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblActivity) ProtoMessage() {}

func (x *ChemblActivity) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblActivity.ProtoReflect.Descriptor instead.
func (*ChemblActivity) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{17}
}

func (x *ChemblActivity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChemblActivity) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *ChemblActivity) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ChemblActivity) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *ChemblActivity) GetStandardType() string {
	if x != nil {
		return x.StandardType
	}
	return ""
}

func (x *ChemblActivity) GetStandardRelation() string {
	if x != nil {
		return x.StandardRelation
	}
	return ""
}

func (x *ChemblActivity) GetStandardValue() float64 {
	if x != nil {
		return x.StandardValue
	}
	return 0
}

func (x *ChemblActivity) GetStandardUnits() string {
	if x != nil {
		return x.StandardUnits
	}
	return ""
}

func (x *ChemblActivity) GetDataValidityIssue() string {
	if x != nil {
		return x.DataValidityIssue
	}
	return ""
}

func (x *ChemblActivity) GetDataValidityComment() string {
	if x != nil {
		return x.DataValidityComment
	}
	return ""
}

func (x *ChemblActivity) GetPChembl() float64 {
	if x != nil {
		return x.PChembl
	}
	return 0
}

func (x *ChemblActivity) GetActivityComment() string {
	if x != nil {
		return x.ActivityComment
	}
	return ""
}

func (x *ChemblActivity) GetPotentialDuplicate() string {
	if x != nil {
		return x.PotentialDuplicate
	}
	return ""
}

func (x *ChemblActivity) GetBao() string {
	if x != nil {
		return x.Bao
	}
	return ""
}

type ChemblMolecule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc                    string              `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	HighestDevelopmentPhase int32               `protobuf:"varint,2,opt,name=highestDevelopmentPhase,proto3" json:"highestDevelopmentPhase,omitempty"`
	AltNames                []string            `protobuf:"bytes,3,rep,name=altNames,proto3" json:"altNames,omitempty"`
	AtcClassification       []string            `protobuf:"bytes,4,rep,name=atcClassification,proto3" json:"atcClassification,omitempty"`
	IsBiotherapeutic        string              `protobuf:"bytes,5,opt,name=isBiotherapeutic,proto3" json:"isBiotherapeutic,omitempty"`
	HelmNotation            string              `protobuf:"bytes,6,opt,name=helmNotation,proto3" json:"helmNotation,omitempty"`
	HracClassification      string              `protobuf:"bytes,7,opt,name=hracClassification,proto3" json:"hracClassification,omitempty"`
	FracClassification      string              `protobuf:"bytes,8,opt,name=fracClassification,proto3" json:"fracClassification,omitempty"`
	IracClassification      string              `protobuf:"bytes,9,opt,name=iracClassification,proto3" json:"iracClassification,omitempty"`
	Type                    string              `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	BioComponentType        string              `protobuf:"bytes,11,opt,name=bioComponentType,proto3" json:"bioComponentType,omitempty"`
	BioComponentDescription string              `protobuf:"bytes,12,opt,name=bioComponentDescription,proto3" json:"bioComponentDescription,omitempty"`
	BioComponentSquence     string              `protobuf:"bytes,13,opt,name=bioComponentSquence,proto3" json:"bioComponentSquence,omitempty"`
	BioComponentTaxo        string              `protobuf:"bytes,14,opt,name=bioComponentTaxo,proto3" json:"bioComponentTaxo,omitempty"`
	Indications             []*ChemblIndication `protobuf:"bytes,15,rep,name=indications,proto3" json:"indications,omitempty"`
	Parent                  string              `protobuf:"bytes,16,opt,name=parent,proto3" json:"parent,omitempty"`
	Childs                  []string            `protobuf:"bytes,17,rep,name=childs,proto3" json:"childs,omitempty"`
	Mechanism               *ChemblMechanism    `protobuf:"bytes,18,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
	Inchi                   string              `protobuf:"bytes,19,opt,name=inchi,proto3" json:"inchi,omitempty"`
	Name                    string              `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	InchiKey                string              `protobuf:"bytes,21,opt,name=inchiKey,proto3" json:"inchiKey,omitempty"`
	Smiles                  string              `protobuf:"bytes,22,opt,name=smiles,proto3" json:"smiles,omitempty"`
	Alogp                   float64             `protobuf:"fixed64,23,opt,name=alogp,proto3" json:"alogp,omitempty"`
	WeightFreebase          float64             `protobuf:"fixed64,24,opt,name=weightFreebase,proto3" json:"weightFreebase,omitempty"`
	Hba                     float64             `protobuf:"fixed64,25,opt,name=hba,proto3" json:"hba,omitempty"`
	Hbd                     float64             `protobuf:"fixed64,26,opt,name=hbd,proto3" json:"hbd,omitempty"`
	Psa                     float64             `protobuf:"fixed64,27,opt,name=psa,proto3" json:"psa,omitempty"`
	Rtb                     float64             `protobuf:"fixed64,28,opt,name=rtb,proto3" json:"rtb,omitempty"`
	Ro3Pass                 string              `protobuf:"bytes,29,opt,name=ro3Pass,proto3" json:"ro3Pass,omitempty"`
	NumRo5Violations        float64             `protobuf:"fixed64,30,opt,name=numRo5Violations,proto3" json:"numRo5Violations,omitempty"`
	AcdMostApka             float64             `protobuf:"fixed64,31,opt,name=acdMostApka,proto3" json:"acdMostApka,omitempty"`
	AcdMostBpka             float64             `protobuf:"fixed64,32,opt,name=acdMostBpka,proto3" json:"acdMostBpka,omitempty"`
	AcdLogp                 float64             `protobuf:"fixed64,33,opt,name=acdLogp,proto3" json:"acdLogp,omitempty"`
	AcdLogd                 float64             `protobuf:"fixed64,34,opt,name=acdLogd,proto3" json:"acdLogd,omitempty"`
	MolecularSpecies        string              `protobuf:"bytes,35,opt,name=molecularSpecies,proto3" json:"molecularSpecies,omitempty"`
	Weight                  float64             `protobuf:"fixed64,36,opt,name=weight,proto3" json:"weight,omitempty"`
	AromaticRings           float64             `protobuf:"fixed64,37,opt,name=aromaticRings,proto3" json:"aromaticRings,omitempty"`
	HeavyAtoms              float64             `protobuf:"fixed64,38,opt,name=heavyAtoms,proto3" json:"heavyAtoms,omitempty"`
	Formula                 string              `protobuf:"bytes,39,opt,name=formula,proto3" json:"formula,omitempty"`
	WeightMonoisotopic      float64             `protobuf:"fixed64,40,opt,name=weightMonoisotopic,proto3" json:"weightMonoisotopic,omitempty"`
	QedWeighted             float64             `protobuf:"fixed64,41,opt,name=qedWeighted,proto3" json:"qedWeighted,omitempty"`
}

func (x *ChemblMolecule) Reset() {
	*x = ChemblMolecule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblMolecule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblMolecule) ProtoMessage() {}

func (x *ChemblMolecule) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblMolecule.ProtoReflect.Descriptor instead.
func (*ChemblMolecule) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{18}
}

func (x *ChemblMolecule) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ChemblMolecule) GetHighestDevelopmentPhase() int32 {
	if x != nil {
		return x.HighestDevelopmentPhase
	}
	return 0
}

func (x *ChemblMolecule) GetAltNames() []string {
	if x != nil {
		return x.AltNames
	}
	return nil
}

func (x *ChemblMolecule) GetAtcClassification() []string {
	if x != nil {
		return x.AtcClassification
	}
	return nil
}

func (x *ChemblMolecule) GetIsBiotherapeutic() string {
	if x != nil {
		return x.IsBiotherapeutic
	}
	return ""
}

func (x *ChemblMolecule) GetHelmNotation() string {
	if x != nil {
		return x.HelmNotation
	}
	return ""
}

func (x *ChemblMolecule) GetHracClassification() string {
	if x != nil {
		return x.HracClassification
	}
	return ""
}

func (x *ChemblMolecule) GetFracClassification() string {
	if x != nil {
		return x.FracClassification
	}
	return ""
}

func (x *ChemblMolecule) GetIracClassification() string {
	if x != nil {
		return x.IracClassification
	}
	return ""
}

func (x *ChemblMolecule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChemblMolecule) GetBioComponentType() string {
	if x != nil {
		return x.BioComponentType
	}
	return ""
}

func (x *ChemblMolecule) GetBioComponentDescription() string {
	if x != nil {
		return x.BioComponentDescription
	}
	return ""
}

func (x *ChemblMolecule) GetBioComponentSquence() string {
	if x != nil {
		return x.BioComponentSquence
	}
	return ""
}

func (x *ChemblMolecule) GetBioComponentTaxo() string {
	if x != nil {
		return x.BioComponentTaxo
	}
	return ""
}

func (x *ChemblMolecule) GetIndications() []*ChemblIndication {
	if x != nil {
		return x.Indications
	}
	return nil
}

func (x *ChemblMolecule) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ChemblMolecule) GetChilds() []string {
	if x != nil {
		return x.Childs
	}
	return nil
}

func (x *ChemblMolecule) GetMechanism() *ChemblMechanism {
	if x != nil {
		return x.Mechanism
	}
	return nil
}

func (x *ChemblMolecule) GetInchi() string {
	if x != nil {
		return x.Inchi
	}
	return ""
}

func (x *ChemblMolecule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChemblMolecule) GetInchiKey() string {
	if x != nil {
		return x.InchiKey
	}
	return ""
}

func (x *ChemblMolecule) GetSmiles() string {
	if x != nil {
		return x.Smiles
	}
	return ""
}

func (x *ChemblMolecule) GetAlogp() float64 {
	if x != nil {
		return x.Alogp
	}
	return 0
}

func (x *ChemblMolecule) GetWeightFreebase() float64 {
	if x != nil {
		return x.WeightFreebase
	}
	return 0
}

func (x *ChemblMolecule) GetHba() float64 {
	if x != nil {
		return x.Hba
	}
	return 0
}

func (x *ChemblMolecule) GetHbd() float64 {
	if x != nil {
		return x.Hbd
	}
	return 0
}

func (x *ChemblMolecule) GetPsa() float64 {
	if x != nil {
		return x.Psa
	}
	return 0
}

func (x *ChemblMolecule) GetRtb() float64 {
	if x != nil {
		return x.Rtb
	}
	return 0
}

func (x *ChemblMolecule) GetRo3Pass() string {
	if x != nil {
		return x.Ro3Pass
	}
	return ""
}

func (x *ChemblMolecule) GetNumRo5Violations() float64 {
	if x != nil {
		return x.NumRo5Violations
	}
	return 0
}

func (x *ChemblMolecule) GetAcdMostApka() float64 {
	if x != nil {
		return x.AcdMostApka
	}
	return 0
}

func (x *ChemblMolecule) GetAcdMostBpka() float64 {
	if x != nil {
		return x.AcdMostBpka
	}
	return 0
}

func (x *ChemblMolecule) GetAcdLogp() float64 {
	if x != nil {
		return x.AcdLogp
	}
	return 0
}

func (x *ChemblMolecule) GetAcdLogd() float64 {
	if x != nil {
		return x.AcdLogd
	}
	return 0
}

func (x *ChemblMolecule) GetMolecularSpecies() string {
	if x != nil {
		return x.MolecularSpecies
	}
	return ""
}

func (x *ChemblMolecule) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ChemblMolecule) GetAromaticRings() float64 {
	if x != nil {
		return x.AromaticRings
	}
	return 0
}

func (x *ChemblMolecule) GetHeavyAtoms() float64 {
	if x != nil {
		return x.HeavyAtoms
	}
	return 0
}

func (x *ChemblMolecule) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *ChemblMolecule) GetWeightMonoisotopic() float64 {
	if x != nil {
		return x.WeightMonoisotopic
	}
	return 0
}

func (x *ChemblMolecule) GetQedWeighted() float64 {
	if x != nil {
		return x.QedWeighted
	}
	return 0
}

type ChemblIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EfoName                 string           `protobuf:"bytes,1,opt,name=efoName,proto3" json:"efoName,omitempty"`
	MeshHeading             string           `protobuf:"bytes,2,opt,name=meshHeading,proto3" json:"meshHeading,omitempty"`
	HighestDevelopmentPhase int32            `protobuf:"varint,3,opt,name=highestDevelopmentPhase,proto3" json:"highestDevelopmentPhase,omitempty"`
	Efo                     string           `protobuf:"bytes,4,opt,name=efo,proto3" json:"efo,omitempty"`
	Mesh                    string           `protobuf:"bytes,5,opt,name=mesh,proto3" json:"mesh,omitempty"`
	Mechanism               *ChemblMechanism `protobuf:"bytes,6,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
}

func (x *ChemblIndication) Reset() {
	*x = ChemblIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblIndication) ProtoMessage() {}

func (x *ChemblIndication) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblIndication.ProtoReflect.Descriptor instead.
func (*ChemblIndication) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{19}
}

func (x *ChemblIndication) GetEfoName() string {
	if x != nil {
		return x.EfoName
	}
	return ""
}

func (x *ChemblIndication) GetMeshHeading() string {
	if x != nil {
		return x.MeshHeading
	}
	return ""
}

func (x *ChemblIndication) GetHighestDevelopmentPhase() int32 {
	if x != nil {
		return x.HighestDevelopmentPhase
	}
	return 0
}

func (x *ChemblIndication) GetEfo() string {
	if x != nil {
		return x.Efo
	}
	return ""
}

func (x *ChemblIndication) GetMesh() string {
	if x != nil {
		return x.Mesh
	}
	return ""
}

func (x *ChemblIndication) GetMechanism() *ChemblMechanism {
	if x != nil {
		return x.Mechanism
	}
	return nil
}

type ChemblTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title             string                               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	IsSpeciesGroup    string                               `protobuf:"bytes,2,opt,name=isSpeciesGroup,proto3" json:"isSpeciesGroup,omitempty"`
	Type              string                               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Subsetofs         []string                             `protobuf:"bytes,4,rep,name=subsetofs,proto3" json:"subsetofs,omitempty"`
	Equivalents       []string                             `protobuf:"bytes,5,rep,name=equivalents,proto3" json:"equivalents,omitempty"`
	Subsets           []string                             `protobuf:"bytes,6,rep,name=subsets,proto3" json:"subsets,omitempty"`
	Overlaps          []string                             `protobuf:"bytes,7,rep,name=overlaps,proto3" json:"overlaps,omitempty"`
	BindingSite       *ChemblBindingSite                   `protobuf:"bytes,8,opt,name=bindingSite,proto3" json:"bindingSite,omitempty"`
	Ptclassifications []*ChemblProteinTargetClassification `protobuf:"bytes,9,rep,name=ptclassifications,proto3" json:"ptclassifications,omitempty"`
	// target_components maps to target both via xref and here  because connection has property like single,group,complex
	Components []*ChemblTargetComponentInfo `protobuf:"bytes,10,rep,name=components,proto3" json:"components,omitempty"`
	Mechanism  *ChemblMechanism             `protobuf:"bytes,11,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
	Tax        string                       `protobuf:"bytes,12,opt,name=tax,proto3" json:"tax,omitempty"`
}

func (x *ChemblTarget) Reset() {
	*x = ChemblTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblTarget) ProtoMessage() {}

func (x *ChemblTarget) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblTarget.ProtoReflect.Descriptor instead.
func (*ChemblTarget) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{20}
}

func (x *ChemblTarget) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChemblTarget) GetIsSpeciesGroup() string {
	if x != nil {
		return x.IsSpeciesGroup
	}
	return ""
}

func (x *ChemblTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChemblTarget) GetSubsetofs() []string {
	if x != nil {
		return x.Subsetofs
	}
	return nil
}

func (x *ChemblTarget) GetEquivalents() []string {
	if x != nil {
		return x.Equivalents
	}
	return nil
}

func (x *ChemblTarget) GetSubsets() []string {
	if x != nil {
		return x.Subsets
	}
	return nil
}

func (x *ChemblTarget) GetOverlaps() []string {
	if x != nil {
		return x.Overlaps
	}
	return nil
}

func (x *ChemblTarget) GetBindingSite() *ChemblBindingSite {
	if x != nil {
		return x.BindingSite
	}
	return nil
}

func (x *ChemblTarget) GetPtclassifications() []*ChemblProteinTargetClassification {
	if x != nil {
		return x.Ptclassifications
	}
	return nil
}

func (x *ChemblTarget) GetComponents() []*ChemblTargetComponentInfo {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ChemblTarget) GetMechanism() *ChemblMechanism {
	if x != nil {
		return x.Mechanism
	}
	return nil
}

func (x *ChemblTarget) GetTax() string {
	if x != nil {
		return x.Tax
	}
	return ""
}

type ChemblProteinTargetClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName  string `protobuf:"bytes,1,opt,name=className,proto3" json:"className,omitempty"`
	ClassLevel string `protobuf:"bytes,2,opt,name=classLevel,proto3" json:"classLevel,omitempty"`
	ClassPath  string `protobuf:"bytes,3,opt,name=classPath,proto3" json:"classPath,omitempty"`
}

func (x *ChemblProteinTargetClassification) Reset() {
	*x = ChemblProteinTargetClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblProteinTargetClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblProteinTargetClassification) ProtoMessage() {}

func (x *ChemblProteinTargetClassification) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblProteinTargetClassification.ProtoReflect.Descriptor instead.
func (*ChemblProteinTargetClassification) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{21}
}

func (x *ChemblProteinTargetClassification) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ChemblProteinTargetClassification) GetClassLevel() string {
	if x != nil {
		return x.ClassLevel
	}
	return ""
}

func (x *ChemblProteinTargetClassification) GetClassPath() string {
	if x != nil {
		return x.ClassPath
	}
	return ""
}

type ChemblCellLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc          string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	CellosaurusId string   `protobuf:"bytes,2,opt,name=cellosaurusId,proto3" json:"cellosaurusId,omitempty"`
	Efo           string   `protobuf:"bytes,3,opt,name=efo,proto3" json:"efo,omitempty"`
	Clo           string   `protobuf:"bytes,4,opt,name=clo,proto3" json:"clo,omitempty"`
	Tax           string   `protobuf:"bytes,5,opt,name=tax,proto3" json:"tax,omitempty"`
	Cellxref      []string `protobuf:"bytes,6,rep,name=cellxref,proto3" json:"cellxref,omitempty"`
}

func (x *ChemblCellLine) Reset() {
	*x = ChemblCellLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblCellLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblCellLine) ProtoMessage() {}

func (x *ChemblCellLine) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblCellLine.ProtoReflect.Descriptor instead.
func (*ChemblCellLine) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{22}
}

func (x *ChemblCellLine) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ChemblCellLine) GetCellosaurusId() string {
	if x != nil {
		return x.CellosaurusId
	}
	return ""
}

func (x *ChemblCellLine) GetEfo() string {
	if x != nil {
		return x.Efo
	}
	return ""
}

func (x *ChemblCellLine) GetClo() string {
	if x != nil {
		return x.Clo
	}
	return ""
}

func (x *ChemblCellLine) GetTax() string {
	if x != nil {
		return x.Tax
	}
	return ""
}

func (x *ChemblCellLine) GetCellxref() []string {
	if x != nil {
		return x.Cellxref
	}
	return nil
}

type ChemblTargetComponentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Acc  string `protobuf:"bytes,2,opt,name=acc,proto3" json:"acc,omitempty"`
}

func (x *ChemblTargetComponentInfo) Reset() {
	*x = ChemblTargetComponentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblTargetComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblTargetComponentInfo) ProtoMessage() {}

func (x *ChemblTargetComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblTargetComponentInfo.ProtoReflect.Descriptor instead.
func (*ChemblTargetComponentInfo) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{23}
}

func (x *ChemblTargetComponentInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChemblTargetComponentInfo) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

type ChemblTargetComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc              string                               `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	AltLabel          string                               `protobuf:"bytes,2,opt,name=altLabel,proto3" json:"altLabel,omitempty"`
	Type              string                               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ptclassifications []*ChemblProteinTargetClassification `protobuf:"bytes,4,rep,name=ptclassifications,proto3" json:"ptclassifications,omitempty"`
	Acc               string                               `protobuf:"bytes,5,opt,name=acc,proto3" json:"acc,omitempty"` // target component represents an uniprot or ensembl identifier
	Tax               string                               `protobuf:"bytes,6,opt,name=tax,proto3" json:"tax,omitempty"`
}

func (x *ChemblTargetComponent) Reset() {
	*x = ChemblTargetComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblTargetComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblTargetComponent) ProtoMessage() {}

func (x *ChemblTargetComponent) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblTargetComponent.ProtoReflect.Descriptor instead.
func (*ChemblTargetComponent) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{24}
}

func (x *ChemblTargetComponent) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ChemblTargetComponent) GetAltLabel() string {
	if x != nil {
		return x.AltLabel
	}
	return ""
}

func (x *ChemblTargetComponent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChemblTargetComponent) GetPtclassifications() []*ChemblProteinTargetClassification {
	if x != nil {
		return x.Ptclassifications
	}
	return nil
}

func (x *ChemblTargetComponent) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *ChemblTargetComponent) GetTax() string {
	if x != nil {
		return x.Tax
	}
	return ""
}

type ChemblAssay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc            string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Type            string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	TargetConfDesc  string `protobuf:"bytes,3,opt,name=targetConfDesc,proto3" json:"targetConfDesc,omitempty"`
	TargetRelType   string `protobuf:"bytes,4,opt,name=targetRelType,proto3" json:"targetRelType,omitempty"`
	TargetRelDesc   string `protobuf:"bytes,5,opt,name=targetRelDesc,proto3" json:"targetRelDesc,omitempty"`
	TargetConfScore int32  `protobuf:"varint,6,opt,name=targetConfScore,proto3" json:"targetConfScore,omitempty"`
	SubCellFrac     string `protobuf:"bytes,7,opt,name=subCellFrac,proto3" json:"subCellFrac,omitempty"`
	TestType        string `protobuf:"bytes,8,opt,name=testType,proto3" json:"testType,omitempty"`
	Strain          string `protobuf:"bytes,9,opt,name=strain,proto3" json:"strain,omitempty"`
	CellType        string `protobuf:"bytes,10,opt,name=cellType,proto3" json:"cellType,omitempty"`
	Tissue          string `protobuf:"bytes,11,opt,name=tissue,proto3" json:"tissue,omitempty"`
	Tax             string `protobuf:"bytes,12,opt,name=tax,proto3" json:"tax,omitempty"`
	Category        string `protobuf:"bytes,13,opt,name=category,proto3" json:"category,omitempty"`
	Source          string `protobuf:"bytes,14,opt,name=source,proto3" json:"source,omitempty"`
	SourceDesc      string `protobuf:"bytes,15,opt,name=sourceDesc,proto3" json:"sourceDesc,omitempty"`
	Bao             string `protobuf:"bytes,16,opt,name=bao,proto3" json:"bao,omitempty"`
}

func (x *ChemblAssay) Reset() {
	*x = ChemblAssay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblAssay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblAssay) ProtoMessage() {}

func (x *ChemblAssay) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblAssay.ProtoReflect.Descriptor instead.
func (*ChemblAssay) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{25}
}

func (x *ChemblAssay) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ChemblAssay) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChemblAssay) GetTargetConfDesc() string {
	if x != nil {
		return x.TargetConfDesc
	}
	return ""
}

func (x *ChemblAssay) GetTargetRelType() string {
	if x != nil {
		return x.TargetRelType
	}
	return ""
}

func (x *ChemblAssay) GetTargetRelDesc() string {
	if x != nil {
		return x.TargetRelDesc
	}
	return ""
}

func (x *ChemblAssay) GetTargetConfScore() int32 {
	if x != nil {
		return x.TargetConfScore
	}
	return 0
}

func (x *ChemblAssay) GetSubCellFrac() string {
	if x != nil {
		return x.SubCellFrac
	}
	return ""
}

func (x *ChemblAssay) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *ChemblAssay) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

func (x *ChemblAssay) GetCellType() string {
	if x != nil {
		return x.CellType
	}
	return ""
}

func (x *ChemblAssay) GetTissue() string {
	if x != nil {
		return x.Tissue
	}
	return ""
}

func (x *ChemblAssay) GetTax() string {
	if x != nil {
		return x.Tax
	}
	return ""
}

func (x *ChemblAssay) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ChemblAssay) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ChemblAssay) GetSourceDesc() string {
	if x != nil {
		return x.SourceDesc
	}
	return ""
}

func (x *ChemblAssay) GetBao() string {
	if x != nil {
		return x.Bao
	}
	return ""
}

type ChemblBindingSite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mechanism *ChemblMechanism `protobuf:"bytes,2,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
}

func (x *ChemblBindingSite) Reset() {
	*x = ChemblBindingSite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblBindingSite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblBindingSite) ProtoMessage() {}

func (x *ChemblBindingSite) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblBindingSite.ProtoReflect.Descriptor instead.
func (*ChemblBindingSite) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{26}
}

func (x *ChemblBindingSite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChemblBindingSite) GetMechanism() *ChemblMechanism {
	if x != nil {
		return x.Mechanism
	}
	return nil
}

type ChemblMechanism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc   string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ChemblMechanism) Reset() {
	*x = ChemblMechanism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChemblMechanism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChemblMechanism) ProtoMessage() {}

func (x *ChemblMechanism) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChemblMechanism.ProtoReflect.Descriptor instead.
func (*ChemblMechanism) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{27}
}

func (x *ChemblMechanism) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ChemblMechanism) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type HmdbAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc              string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Accessions        []string `protobuf:"bytes,3,rep,name=accessions,proto3" json:"accessions,omitempty"`
	Synonyms          []string `protobuf:"bytes,4,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Diseases          []string `protobuf:"bytes,5,rep,name=diseases,proto3" json:"diseases,omitempty"`
	Formula           string   `protobuf:"bytes,6,opt,name=formula,proto3" json:"formula,omitempty"`
	AverageWeight     float64  `protobuf:"fixed64,7,opt,name=averageWeight,proto3" json:"averageWeight,omitempty"`
	MonisotopicWeight float64  `protobuf:"fixed64,8,opt,name=monisotopicWeight,proto3" json:"monisotopicWeight,omitempty"`
	IupacName         string   `protobuf:"bytes,9,opt,name=iupacName,proto3" json:"iupacName,omitempty"`
	Smiles            string   `protobuf:"bytes,10,opt,name=smiles,proto3" json:"smiles,omitempty"`
	Inchi             string   `protobuf:"bytes,11,opt,name=inchi,proto3" json:"inchi,omitempty"`
	InchiKey          string   `protobuf:"bytes,12,opt,name=inchiKey,proto3" json:"inchiKey,omitempty"`
	//HmdbTaxonomy taxonomy = 13;
	Props             *HmdbPredictedProps    `protobuf:"bytes,14,opt,name=props,proto3" json:"props,omitempty"`
	ExperimentalProps *HmdbExperimentalProps `protobuf:"bytes,15,opt,name=experimentalProps,proto3" json:"experimentalProps,omitempty"`
	CellularLocations []string               `protobuf:"bytes,16,rep,name=cellularLocations,proto3" json:"cellularLocations,omitempty"`
	Biospecimens      []string               `protobuf:"bytes,17,rep,name=biospecimens,proto3" json:"biospecimens,omitempty"`
	TissueLocations   []string               `protobuf:"bytes,18,rep,name=tissueLocations,proto3" json:"tissueLocations,omitempty"`
	Pathways          []string               `protobuf:"bytes,19,rep,name=pathways,proto3" json:"pathways,omitempty"`
}

func (x *HmdbAttr) Reset() {
	*x = HmdbAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmdbAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmdbAttr) ProtoMessage() {}

func (x *HmdbAttr) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmdbAttr.ProtoReflect.Descriptor instead.
func (*HmdbAttr) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{28}
}

func (x *HmdbAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HmdbAttr) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *HmdbAttr) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

func (x *HmdbAttr) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *HmdbAttr) GetDiseases() []string {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *HmdbAttr) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *HmdbAttr) GetAverageWeight() float64 {
	if x != nil {
		return x.AverageWeight
	}
	return 0
}

func (x *HmdbAttr) GetMonisotopicWeight() float64 {
	if x != nil {
		return x.MonisotopicWeight
	}
	return 0
}

func (x *HmdbAttr) GetIupacName() string {
	if x != nil {
		return x.IupacName
	}
	return ""
}

func (x *HmdbAttr) GetSmiles() string {
	if x != nil {
		return x.Smiles
	}
	return ""
}

func (x *HmdbAttr) GetInchi() string {
	if x != nil {
		return x.Inchi
	}
	return ""
}

func (x *HmdbAttr) GetInchiKey() string {
	if x != nil {
		return x.InchiKey
	}
	return ""
}

func (x *HmdbAttr) GetProps() *HmdbPredictedProps {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *HmdbAttr) GetExperimentalProps() *HmdbExperimentalProps {
	if x != nil {
		return x.ExperimentalProps
	}
	return nil
}

func (x *HmdbAttr) GetCellularLocations() []string {
	if x != nil {
		return x.CellularLocations
	}
	return nil
}

func (x *HmdbAttr) GetBiospecimens() []string {
	if x != nil {
		return x.Biospecimens
	}
	return nil
}

func (x *HmdbAttr) GetTissueLocations() []string {
	if x != nil {
		return x.TissueLocations
	}
	return nil
}

func (x *HmdbAttr) GetPathways() []string {
	if x != nil {
		return x.Pathways
	}
	return nil
}

type HmdbPredictedProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RotatableBondCount  int32   `protobuf:"varint,1,opt,name=rotatableBondCount,proto3" json:"rotatableBondCount,omitempty"`
	PhysiologicalCharge int32   `protobuf:"varint,2,opt,name=physiologicalCharge,proto3" json:"physiologicalCharge,omitempty"`
	RuleOfFive          string  `protobuf:"bytes,3,opt,name=ruleOfFive,proto3" json:"ruleOfFive,omitempty"`
	PkaStrongestAcidic  float64 `protobuf:"fixed64,4,opt,name=pkaStrongestAcidic,proto3" json:"pkaStrongestAcidic,omitempty"`
	MonoMass            float64 `protobuf:"fixed64,5,opt,name=monoMass,proto3" json:"monoMass,omitempty"`
	GhoseFilter         string  `protobuf:"bytes,6,opt,name=ghose_filter,json=ghoseFilter,proto3" json:"ghose_filter,omitempty"`
	Refractivity        float64 `protobuf:"fixed64,7,opt,name=refractivity,proto3" json:"refractivity,omitempty"`
	FormalCharge        float64 `protobuf:"fixed64,8,opt,name=formalCharge,proto3" json:"formalCharge,omitempty"`
	Bioavailability     string  `protobuf:"bytes,9,opt,name=bioavailability,proto3" json:"bioavailability,omitempty"`
	Solubility          string  `protobuf:"bytes,10,opt,name=solubility,proto3" json:"solubility,omitempty"`
	PkaStrongestBasic   float64 `protobuf:"fixed64,11,opt,name=pka_strongest_basic,json=pkaStrongestBasic,proto3" json:"pka_strongest_basic,omitempty"`
	PolarSurfaceArea    float64 `protobuf:"fixed64,12,opt,name=polarSurfaceArea,proto3" json:"polarSurfaceArea,omitempty"`
	VeberRule           string  `protobuf:"bytes,13,opt,name=veberRule,proto3" json:"veberRule,omitempty"`
	MddrLikeRule        string  `protobuf:"bytes,14,opt,name=mddrLikeRule,proto3" json:"mddrLikeRule,omitempty"`
	Logp                float64 `protobuf:"fixed64,15,opt,name=logp,proto3" json:"logp,omitempty"`
	Polarizability      float64 `protobuf:"fixed64,16,opt,name=polarizability,proto3" json:"polarizability,omitempty"`
	DonorCount          int32   `protobuf:"varint,17,opt,name=donorCount,proto3" json:"donorCount,omitempty"`
	AverageMass         float64 `protobuf:"fixed64,18,opt,name=averageMass,proto3" json:"averageMass,omitempty"`
	AcceptorCount       int32   `protobuf:"varint,19,opt,name=acceptorCount,proto3" json:"acceptorCount,omitempty"`
	NumberOfRings       int32   `protobuf:"varint,20,opt,name=numberOfRings,proto3" json:"numberOfRings,omitempty"`
	Logs                float64 `protobuf:"fixed64,21,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *HmdbPredictedProps) Reset() {
	*x = HmdbPredictedProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmdbPredictedProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmdbPredictedProps) ProtoMessage() {}

func (x *HmdbPredictedProps) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmdbPredictedProps.ProtoReflect.Descriptor instead.
func (*HmdbPredictedProps) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{29}
}

func (x *HmdbPredictedProps) GetRotatableBondCount() int32 {
	if x != nil {
		return x.RotatableBondCount
	}
	return 0
}

func (x *HmdbPredictedProps) GetPhysiologicalCharge() int32 {
	if x != nil {
		return x.PhysiologicalCharge
	}
	return 0
}

func (x *HmdbPredictedProps) GetRuleOfFive() string {
	if x != nil {
		return x.RuleOfFive
	}
	return ""
}

func (x *HmdbPredictedProps) GetPkaStrongestAcidic() float64 {
	if x != nil {
		return x.PkaStrongestAcidic
	}
	return 0
}

func (x *HmdbPredictedProps) GetMonoMass() float64 {
	if x != nil {
		return x.MonoMass
	}
	return 0
}

func (x *HmdbPredictedProps) GetGhoseFilter() string {
	if x != nil {
		return x.GhoseFilter
	}
	return ""
}

func (x *HmdbPredictedProps) GetRefractivity() float64 {
	if x != nil {
		return x.Refractivity
	}
	return 0
}

func (x *HmdbPredictedProps) GetFormalCharge() float64 {
	if x != nil {
		return x.FormalCharge
	}
	return 0
}

func (x *HmdbPredictedProps) GetBioavailability() string {
	if x != nil {
		return x.Bioavailability
	}
	return ""
}

func (x *HmdbPredictedProps) GetSolubility() string {
	if x != nil {
		return x.Solubility
	}
	return ""
}

func (x *HmdbPredictedProps) GetPkaStrongestBasic() float64 {
	if x != nil {
		return x.PkaStrongestBasic
	}
	return 0
}

func (x *HmdbPredictedProps) GetPolarSurfaceArea() float64 {
	if x != nil {
		return x.PolarSurfaceArea
	}
	return 0
}

func (x *HmdbPredictedProps) GetVeberRule() string {
	if x != nil {
		return x.VeberRule
	}
	return ""
}

func (x *HmdbPredictedProps) GetMddrLikeRule() string {
	if x != nil {
		return x.MddrLikeRule
	}
	return ""
}

func (x *HmdbPredictedProps) GetLogp() float64 {
	if x != nil {
		return x.Logp
	}
	return 0
}

func (x *HmdbPredictedProps) GetPolarizability() float64 {
	if x != nil {
		return x.Polarizability
	}
	return 0
}

func (x *HmdbPredictedProps) GetDonorCount() int32 {
	if x != nil {
		return x.DonorCount
	}
	return 0
}

func (x *HmdbPredictedProps) GetAverageMass() float64 {
	if x != nil {
		return x.AverageMass
	}
	return 0
}

func (x *HmdbPredictedProps) GetAcceptorCount() int32 {
	if x != nil {
		return x.AcceptorCount
	}
	return 0
}

func (x *HmdbPredictedProps) GetNumberOfRings() int32 {
	if x != nil {
		return x.NumberOfRings
	}
	return 0
}

func (x *HmdbPredictedProps) GetLogs() float64 {
	if x != nil {
		return x.Logs
	}
	return 0
}

type HmdbExperimentalProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolingPoint    string  `protobuf:"bytes,1,opt,name=boolingPoint,proto3" json:"boolingPoint,omitempty"`
	MeltingPoint    string  `protobuf:"bytes,2,opt,name=meltingPoint,proto3" json:"meltingPoint,omitempty"`
	Logp            float64 `protobuf:"fixed64,3,opt,name=logp,proto3" json:"logp,omitempty"`
	WaterSolubility string  `protobuf:"bytes,4,opt,name=waterSolubility,proto3" json:"waterSolubility,omitempty"`
}

func (x *HmdbExperimentalProps) Reset() {
	*x = HmdbExperimentalProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmdbExperimentalProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmdbExperimentalProps) ProtoMessage() {}

func (x *HmdbExperimentalProps) ProtoReflect() protoreflect.Message {
	mi := &file_attr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmdbExperimentalProps.ProtoReflect.Descriptor instead.
func (*HmdbExperimentalProps) Descriptor() ([]byte, []int) {
	return file_attr_proto_rawDescGZIP(), []int{30}
}

func (x *HmdbExperimentalProps) GetBoolingPoint() string {
	if x != nil {
		return x.BoolingPoint
	}
	return ""
}

func (x *HmdbExperimentalProps) GetMeltingPoint() string {
	if x != nil {
		return x.MeltingPoint
	}
	return ""
}

func (x *HmdbExperimentalProps) GetLogp() float64 {
	if x != nil {
		return x.Logp
	}
	return 0
}

func (x *HmdbExperimentalProps) GetWaterSolubility() string {
	if x != nil {
		return x.WaterSolubility
	}
	return ""
}

var File_attr_proto protoreflect.FileDescriptor

var file_attr_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x62,
	0x75, 0x66, 0x22, 0x52, 0x0a, 0x0c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x08, 0x48, 0x67, 0x6e, 0x63, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x76, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x0b, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x69, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x6f,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x71, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x75, 0x66,
	0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x72, 0x35, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x74, 0x72, 0x35, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x74, 0x72, 0x35, 0x45, 0x6e, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x74, 0x72, 0x35, 0x45, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x74, 0x72, 0x33, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x75, 0x74, 0x72, 0x33, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x74, 0x72, 0x33, 0x45, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75,
	0x74, 0x72, 0x33, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x08, 0x54, 0x61, 0x78, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x59, 0x0a, 0x07, 0x50, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a,
	0x0c, 0x44, 0x72, 0x75, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x28, 0x0a, 0x0c, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x6f, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x77, 0x61, 0x79, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x70, 0x72, 0x6f,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x6e, 0x69, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x22, 0x33, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x70,
	0x72, 0x6f, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x6e, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x6e, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x16, 0x55, 0x6e, 0x69,
	0x70, 0x72, 0x6f, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x35, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x6d, 0x62,
	0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x27, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x41, 0x73, 0x73, 0x61, 0x79, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x6f, 0x6c, 0x65,
	0x63, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x65,
	0x52, 0x08, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x70, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x62, 0x61, 0x6f, 0x22, 0x97, 0x0b, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x4d, 0x6f,
	0x6c, 0x65, 0x63, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x74, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x74, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x73, 0x42, 0x69, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x65, 0x75, 0x74,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73, 0x42, 0x69, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x61, 0x70, 0x65, 0x75, 0x74, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65,
	0x6c, 0x6d, 0x4e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6d, 0x4e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x68, 0x72, 0x61, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x72, 0x61, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x72, 0x61, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x61, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x69, 0x72, 0x61, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x72, 0x61, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69,
	0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x62, 0x69, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x62, 0x69, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x69, 0x6f, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x69, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69,
	0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x78, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x78, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73,
	0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62,
	0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x63, 0x68, 0x69, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x63, 0x68, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x68, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x68, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6f, 0x67, 0x70, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x6f, 0x67, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x72, 0x65, 0x65, 0x62, 0x61, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x72, 0x65, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x62, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x68, 0x62, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x62, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x68, 0x62, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x73, 0x61, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x70, 0x73, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x62, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x74, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x33,
	0x50, 0x61, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x33, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x35, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x52, 0x6f, 0x35, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x64, 0x4d, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x6b, 0x61, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x64, 0x4d, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x6b,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x64, 0x4d, 0x6f, 0x73, 0x74, 0x42, 0x70, 0x6b, 0x61,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x64, 0x4d, 0x6f, 0x73, 0x74, 0x42,
	0x70, 0x6b, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x64, 0x4c, 0x6f, 0x67, 0x70, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x63, 0x64, 0x4c, 0x6f, 0x67, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x64, 0x4c, 0x6f, 0x67, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x61, 0x63, 0x64, 0x4c, 0x6f, 0x67, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x76, 0x79, 0x41, 0x74, 0x6f, 0x6d, 0x73, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x76, 0x79, 0x41, 0x74, 0x6f, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x6e, 0x6f, 0x69, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x6f, 0x6e, 0x6f, 0x69, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x71,
	0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x71, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x22, 0xe3, 0x01,
	0x0a, 0x10, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x66, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x66, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x68, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x38,
	0x0a, 0x17, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x12, 0x33,
	0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x4d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x22, 0xf0, 0x03, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x6f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x6f, 0x66, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0b,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x70, 0x74, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x74, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x78, 0x22, 0x7f, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x6d,
	0x62, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x61, 0x75, 0x72,
	0x75, 0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6c, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6c, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65,
	0x6c, 0x6c, 0x78, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65,
	0x6c, 0x6c, 0x78, 0x72, 0x65, 0x66, 0x22, 0x41, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x22, 0xd6, 0x01, 0x0a, 0x15, 0x43, 0x68,
	0x65, 0x6d, 0x62, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x70, 0x74, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x74, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x78, 0x22, 0xd5, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x6d, 0x62, 0x6c, 0x41, 0x73, 0x73,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43,
	0x65, 0x6c, 0x6c, 0x46, 0x72, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x72, 0x61, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x61, 0x6f, 0x22, 0x5c, 0x0a, 0x11, 0x43, 0x68,
	0x65, 0x6d, 0x62, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68,
	0x65, 0x6d, 0x62, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x09, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x3d, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x6d,
	0x62, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x04, 0x0a, 0x08, 0x48, 0x6d, 0x64, 0x62,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x73, 0x6f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x75, 0x70, 0x61, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x75, 0x70, 0x61, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x63, 0x68,
	0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x63, 0x68, 0x69, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x63, 0x68, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x63, 0x68, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x75, 0x66,
	0x2e, 0x48, 0x6d, 0x64, 0x62, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x6d, 0x64,
	0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x69, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x73, 0x22, 0x93, 0x06,
	0x0a, 0x12, 0x48, 0x6d, 0x64, 0x62, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x4f, 0x66,
	0x46, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65,
	0x4f, 0x66, 0x46, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6b, 0x61, 0x53, 0x74, 0x72,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x41, 0x63, 0x69, 0x64, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x70, 0x6b, 0x61, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x69, 0x64, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x4d, 0x61,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x4d, 0x61,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x68, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x68, 0x6f, 0x73, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x62, 0x69, 0x6f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x6f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c,
	0x75, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6b, 0x61, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x6b, 0x61, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x62, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x62, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x48, 0x6d, 0x64, 0x62, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x6c, 0x75, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x75, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2a, 0x64, 0x0a, 0x0d, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x4e, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x55, 0x4e,
	0x47, 0x49, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x54, 0x41, 0x5a, 0x4f, 0x41, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x54, 0x49, 0x53, 0x54, 0x10, 0x06, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_attr_proto_rawDescOnce sync.Once
	file_attr_proto_rawDescData = file_attr_proto_rawDesc
)

func file_attr_proto_rawDescGZIP() []byte {
	file_attr_proto_rawDescOnce.Do(func() {
		file_attr_proto_rawDescData = protoimpl.X.CompressGZIP(file_attr_proto_rawDescData)
	})
	return file_attr_proto_rawDescData
}

var file_attr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_attr_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_attr_proto_goTypes = []interface{}{
	(Ensemblbranch)(0),                        // 0: pbuf.ensemblbranch
	(*OntologyAttr)(nil),                      // 1: pbuf.OntologyAttr
	(*HgncAttr)(nil),                          // 2: pbuf.HgncAttr
	(*InterproAttr)(nil),                      // 3: pbuf.InterproAttr
	(*EnsemblAttr)(nil),                       // 4: pbuf.EnsemblAttr
	(*TaxoAttr)(nil),                          // 5: pbuf.TaxoAttr
	(*EnaAttr)(nil),                           // 6: pbuf.EnaAttr
	(*PdbAttr)(nil),                           // 7: pbuf.PdbAttr
	(*DrugbankAttr)(nil),                      // 8: pbuf.DrugbankAttr
	(*OrphanetAttr)(nil),                      // 9: pbuf.OrphanetAttr
	(*ReactomeAttr)(nil),                      // 10: pbuf.ReactomeAttr
	(*UniprotAttr)(nil),                       // 11: pbuf.UniprotAttr
	(*UniSequence)(nil),                       // 12: pbuf.UniSequence
	(*UniprotFeatureAttr)(nil),                // 13: pbuf.UniprotFeatureAttr
	(*UniprotFeatureEvidence)(nil),            // 14: pbuf.UniprotFeatureEvidence
	(*UniLocation)(nil),                       // 15: pbuf.UniLocation
	(*ChemblAttr)(nil),                        // 16: pbuf.ChemblAttr
	(*ChemblDocument)(nil),                    // 17: pbuf.ChemblDocument
	(*ChemblActivity)(nil),                    // 18: pbuf.ChemblActivity
	(*ChemblMolecule)(nil),                    // 19: pbuf.ChemblMolecule
	(*ChemblIndication)(nil),                  // 20: pbuf.ChemblIndication
	(*ChemblTarget)(nil),                      // 21: pbuf.ChemblTarget
	(*ChemblProteinTargetClassification)(nil), // 22: pbuf.ChemblProteinTargetClassification
	(*ChemblCellLine)(nil),                    // 23: pbuf.ChemblCellLine
	(*ChemblTargetComponentInfo)(nil),         // 24: pbuf.ChemblTargetComponentInfo
	(*ChemblTargetComponent)(nil),             // 25: pbuf.ChemblTargetComponent
	(*ChemblAssay)(nil),                       // 26: pbuf.ChemblAssay
	(*ChemblBindingSite)(nil),                 // 27: pbuf.ChemblBindingSite
	(*ChemblMechanism)(nil),                   // 28: pbuf.ChemblMechanism
	(*HmdbAttr)(nil),                          // 29: pbuf.HmdbAttr
	(*HmdbPredictedProps)(nil),                // 30: pbuf.HmdbPredictedProps
	(*HmdbExperimentalProps)(nil),             // 31: pbuf.HmdbExperimentalProps
}
var file_attr_proto_depIdxs = []int32{
	0,  // 0: pbuf.EnsemblAttr.branch:type_name -> pbuf.ensemblbranch
	12, // 1: pbuf.UniprotAttr.sequence:type_name -> pbuf.UniSequence
	14, // 2: pbuf.UniprotFeatureAttr.evidences:type_name -> pbuf.UniprotFeatureEvidence
	15, // 3: pbuf.UniprotFeatureAttr.location:type_name -> pbuf.UniLocation
	17, // 4: pbuf.ChemblAttr.doc:type_name -> pbuf.ChemblDocument
	26, // 5: pbuf.ChemblAttr.assay:type_name -> pbuf.ChemblAssay
	18, // 6: pbuf.ChemblAttr.activity:type_name -> pbuf.ChemblActivity
	19, // 7: pbuf.ChemblAttr.molecule:type_name -> pbuf.ChemblMolecule
	21, // 8: pbuf.ChemblAttr.target:type_name -> pbuf.ChemblTarget
	25, // 9: pbuf.ChemblAttr.targetComponent:type_name -> pbuf.ChemblTargetComponent
	23, // 10: pbuf.ChemblAttr.cellLine:type_name -> pbuf.ChemblCellLine
	20, // 11: pbuf.ChemblMolecule.indications:type_name -> pbuf.ChemblIndication
	28, // 12: pbuf.ChemblMolecule.mechanism:type_name -> pbuf.ChemblMechanism
	28, // 13: pbuf.ChemblIndication.mechanism:type_name -> pbuf.ChemblMechanism
	27, // 14: pbuf.ChemblTarget.bindingSite:type_name -> pbuf.ChemblBindingSite
	22, // 15: pbuf.ChemblTarget.ptclassifications:type_name -> pbuf.ChemblProteinTargetClassification
	24, // 16: pbuf.ChemblTarget.components:type_name -> pbuf.ChemblTargetComponentInfo
	28, // 17: pbuf.ChemblTarget.mechanism:type_name -> pbuf.ChemblMechanism
	22, // 18: pbuf.ChemblTargetComponent.ptclassifications:type_name -> pbuf.ChemblProteinTargetClassification
	28, // 19: pbuf.ChemblBindingSite.mechanism:type_name -> pbuf.ChemblMechanism
	30, // 20: pbuf.HmdbAttr.props:type_name -> pbuf.HmdbPredictedProps
	31, // 21: pbuf.HmdbAttr.experimentalProps:type_name -> pbuf.HmdbExperimentalProps
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_attr_proto_init() }
func file_attr_proto_init() {
	if File_attr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_attr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OntologyAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HgncAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterproAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsemblAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxoAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnaAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdbAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrugbankAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrphanetAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactomeAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniprotAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniprotFeatureAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniprotFeatureEvidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblMolecule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblProteinTargetClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblCellLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblTargetComponentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblTargetComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblAssay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblBindingSite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChemblMechanism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmdbAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmdbPredictedProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmdbExperimentalProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_attr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_attr_proto_goTypes,
		DependencyIndexes: file_attr_proto_depIdxs,
		EnumInfos:         file_attr_proto_enumTypes,
		MessageInfos:      file_attr_proto_msgTypes,
	}.Build()
	File_attr_proto = out.File
	file_attr_proto_rawDesc = nil
	file_attr_proto_goTypes = nil
	file_attr_proto_depIdxs = nil
}
